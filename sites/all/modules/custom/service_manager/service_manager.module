<?php

function service_manager_permission() {
	return array(
		'access service_manager content' => array( 'title' => t('Access content for the Service Manager module'), ),
		'access service_manager administration' => array( 'title' => t('Administer the Service Manager Module'), ),
		'access service_manager data feeds' => array( 'title' => t('Access data feeds for the Service Manager module'), ),
	);
}

function service_manager_menu () {
	$items['admin/config/services/service_manager'] = array(
		'title' => 'Service Manager',
		'description' => 'Configuration for Service Manager',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('service_manager_config_form'),
		'access arguments' => array('access service_manager administration'),
		'type' => MENU_NORMAL_ITEM,
	);
	$items['service_manager'] = array(
		'title' => 'Service Manager',
		'page callback' => 'service_manager_description',
		'access arguments' => array('access service_manager content'),
		'type' => MENU_NORMAL_ITEM,
	);
	$items['service_manager/store_support_tickets'] = array(
		'title' => 'Store Support Tickets',
		'page callback' => 'service_manager_store_support_tickets',
		'access arguments' => array('access service_manager content'),
		'type' => MENU_NORMAL_ITEM,
	);
	$items['service_manager/store_emergency_contact'] = array(
		'title' => 'Store Emergency Contacts',
		'page callback' => 'service_manager_store_emergency_contact',
		'access arguments' => array('access service_manager content'),
		'type' => MENU_NORMAL_ITEM,
	);
	$items['service_manager/store_emergency_contact/%'] = array(
		'title' => 'Store Emergency Contacts',
		'page callback' => 'service_manager_store_emergency_contact',
		'page arguments' => array(2),
		'access arguments' => array('access service_manager content'),
		'type' => MENU_NORMAL_ITEM,
	);
	return $items;
}

function service_manager_config_form ($form, &$form_state) {
        $form['service_manager_config_wsdl_client_url'] = array(
                '#type' => 'textfield',
                '#title' => t('Configuration Management URL'),
                '#default_value' => variable_get('service_manager_config_wsdl_client_url', ''),
                '#size' => 255,
                '#maxlength' => 255,
                '#description' => t('The URL to the Service Manager Web Service for Configuration Management.'),
                '#required' => TRUE,
        );
        $form['service_manager_incident_wsdl_client_url'] = array(
                '#type' => 'textfield',
                '#title' => t('Incident Management URL'),
                '#default_value' => variable_get('service_manager_incident_wsdl_client_url', ''),
                '#size' => 255,
                '#maxlength' => 255,
                '#description' => t('The URL to the Service Manager Web Service for Incident Management.'),
                '#required' => TRUE,
        );
        $form['service_manager_username'] = array(
                '#type' => 'textfield',
                '#title' => t('Service Manager User Name'),
                '#default_value' => variable_get('service_manager_username', ''),
                '#size' => 255,
                '#maxlength' => 255,
                '#required' => TRUE,
        );
        $form['service_manager_password'] = array(
                '#type' => 'textfield',
                '#title' => t('Service Manager Password'),
                '#default_value' => variable_get('service_manager_password', ''),
                '#size' => 255,
                '#maxlength' => 255,
                '#description' => t('The password for the Service Manager User Name above.'),
                '#required' => TRUE,
        );
        return system_settings_form($form);
}

function service_manager_description() {
	return array('#markup' => '<p>' . t('Place Holder') . '</p>');
}

function service_manager_get_location_list() {
	$return = "";
	$sc = variable_get('service_manager_config_wsdl_client_url', '');
	$sc_user = variable_get('service_manager_username','');
	$sc_pass = variable_get('service_manager_password','');

        $client = new nusoap_client($sc, 'wsdl', false, false, false, false, 0, 600);
        $err = $client->getError();
        if ($err) {
                return('<h2>Constructor error</h2><pre>' . $err . '</pre>');
        }
        $client->setCredentials($sc_user, $sc_pass);

        $query = 'SiteCategory="STORE"&closed="false"';
        $keys = new soapval('keys','ConfigurationKeysType',"","http://servicecenter.peregrine.com/PWS",false,array("query" => $query));
        $instance = new soapval("instance","ConfigurationInstanceType","","http://servicecenter.peregrine.com/PWS");
        $model = new soapval("model", "ConfigurationModelType",array($keys,$instance),null,"http://servicecenter.peregrine.com/PWS");
        $RetrieveLocationListRequest = new soapval("RetrieveLocationListRequest","RetrieveLocationListRequestType",$model,"http://servicecenter.peregrine.com/PWS");
        $result = $client->call('RetrieveLocationList',$RetrieveLocationListRequest->serialize('literal'),"http://servicecenter.peregrine.com/PWS");

        if ($client->fault) {
                return("Client fault");
        } else {
                $err = $client->getError();
                if ($err) {
                        return("Client error: ".$err);
                } else {
                        $return .= "<pre>".print_r($result['instance'],TRUE)."</pre>";
                }
        }
	return(array('#markup' => t($return)));
}

function service_manager_store_support_tickets() {
	$return = "";

	$queries = array('All Tickets' => 'IMTicketStatus~="Closed"');
	$all_tickets = service_manager_recursive_query($queries);

	$display_tickets = array(	
		'Emergency Alert' => array(),
		'Store Support Alert' => array(),
		'EUS' => array(
			'P1' => array(),
			'P2' => array(),
			'P3' => array(),
			'All Open' => array(),
			'Open Over 8 Days' => array(),
		),
		'ISP' => array(
			'Open ISP tickets' => array(),
			'Open ISP hdisk tickets' => array(),
		),
		'NOC' => array(
			'P1' => array(),
			'P2' => array(),
			'P3' => array(),
			'All Open' => array(),
		),
		'Store Support' => array(
			'TOLT' => array(
				'P1' => array(),
				'P2' => array(),
				'P3' => array(),
				'P4' => array(),
				'All Open' => array(),
				'Open Over 8 Days' => array(),
			),
			'USCAN' => array(
				'P1' => array(),
				'P2' => array(),
				'P3' => array(),
				'All Open' => array(),
				'Open Over 8 Days' => array(),
			),
		),
		'Voice Operations' => array(),
		'Warehouse' => array(),
		'Store Network Down' => array(),
	);

	foreach($all_tickets['All Tickets'] as $ticket) {
		if(isset($ticket['Category'])) {
			if(in_array('emergency',$ticket['Category'])) $display_tickets['Emergency Alert'][] = $ticket;
		}
		if(isset($ticket['HotTic']) && $ticket['HotTic'] == 'true') {
			$display_tickets['Store Support Alert'][] = $ticket;
		}
//		$display_tickets['All Tickets'][] = $ticket;
	}

//	$display_tickets = service_manager_recursive_query($queries);

	$return .= service_manager_array_to_div($display_tickets);

	$return .= "<p><br /><b>Support Center:</b> (800) 877-7717<br />";
	$return .= "<b>Office Helpdesk:</b> (201) 571-4242<br /></p>";

	return(array('#markup' => t($return)));
}

function service_manager_recursive_query($queries) {
	$return = array();
	$sc = variable_get('service_manager_incident_wsdl_client_url', '');
	$sc_user = variable_get('service_manager_username','');
	$sc_pass = variable_get('service_manager_password','');

        $client = new nusoap_client($sc, 'wsdl', false, false, false, false, 0, 600);
        $err = $client->getError();
        if ($err) {
                return('<h2>Constructor error</h2><pre>' . $err . '</pre>');
        }
        $client->setCredentials($sc_user, $sc_pass);

	foreach($queries as $key => $query) {
		if(is_array($query)) {
			$return[$key] = service_manager_recursive_query($query);
		} else {
			$keys = new soapval('keys','IncidentKeysType',"","http://servicecenter.peregrine.com/PWS",false,array("query" => $query));
			$instance = new soapval("instance","IncidentInstanceType","","http://servicecenter.peregrine.com/PWS");
			$model = new soapval("model", "IncidentModelType",array($keys,$instance),null,"http://servicecenter.peregrine.com/PWS");
			$RetrieveIncidentListRequest = new soapval("RetrieveIncidentListRequest","RetrieveIncidentListRequestType",$model,"http://servicecenter.peregrine.com/PWS");
			$result = $client->call('RetrieveIncidentList',$RetrieveIncidentListRequest->serialize('literal'),"http://servicecenter.peregrine.com/PWS");
		
		        if ($client->fault) {
		                $return[$key] = "Client fault";
		        } else {
		                $err = $client->getError();
		                if ($err) {
		                        $return[$key] = "Client error: ".$err;
				} else {
					if($result['!status'] !== 'FAILURE') {
						if(isset($result['instance']['IncidentID'])) {
							$return[$key][0] = $result['instance'];
						} else {
							$return[$key] = $result['instance'];
						}
					} else {
						$return[$key]['!message'] = $result['!message'];
					}
				}
			}
		}
	}
	return($return);
}

function service_manager_array_to_div($array) {
	$return = "";
	//Loop through tickets and format into expandable divs
	foreach($array as $k => $v) {
		if(is_numeric($k)) { 
			$briefdesc = "<h4>".$v['Location']." / ".$v['IncidentID'].": ".$v['BriefDescription']."</h4>";
			$details = service_manager_im_to_table($v);
			$div_im = theme('ctools_collapsible',array('handle' => $briefdesc, 'content' => $details, 'collapsed' => TRUE));
			$return .= $div_im;
		} elseif($k == '!message') {
			$return .= $v;
		} else {
			$content = service_manager_array_to_div($v);
			$ticketCount = is_array($v) ? count(array_filter(array_keys($v),'is_numeric')) : 0;
			if($ticketCount > 0) {
				$handle = '<h3>'.$k.' ('.$ticketCount.')</h3>';
			} else {
				$handle = '<h3>'.$k.'</h3>';
			}
			$div = theme('ctools_collapsible',
				array(
					'handle' => $handle,
					'content' => $content,
					'collapsed' => TRUE
				)
			);
			$return .= $div;
		}
	}
//	$return .= "<pre>".print_r($array,TRUE)."</pre>";
	return($return);
}

function service_manager_im_to_table($im) {
	$header = array();
	$rows = array();

	switch($im['HelpDesk']) {
		case "Store Support":
			$fields['IncidentID'] = 'IM Number';
			$fields['Location'] = 'Location';
			$fields['SiteID'] = 'Site ID';
			$fields['EmergencyContact'] = 'Contact Info';
			$fields['LocationDetail'] = 'Location Details';
			$fields['Contact'] = 'Reported By';
			$fields['IMTicketStatus'] = 'Status';
			$fields['OpenTime'] = 'Open Time';
			$fields['ClosedTime'] = 'Close Time';
			$fields['Priority'] = 'Priority';
			$fields['StoreRoom'] = 'Room';
			$fields['DevType'] = 'Device';
			$fields['ConfigurationItem'] = 'Affected Item';
			$fields['LaneId'] = 'Lane';
			$fields['PrimaryAssignmentGroup'] = 'Assignment';
			$fields['VendorStatus'] = 'External Vendor Status';
			$fields['VendorTech'] = 'External Vendor Tech';
			$fields['VendorETA'] = 'External Vendor ETA';
			$fields['Graffiti'] = 'External Ticket Number';
			$fields['BriefDescription'] = 'Brief Description';
			$fields['IncidentDescription'] = 'Description';
			$fields['JournalUpdates'] = 'Updates';
			$fields['Resolution'] = 'Resolution';
			break;		
		case "PC Support":
			$fields['IncidentID'] = 'IM Number';
			$fields['Contact'] = 'Reported By';
			$fields['IMTicketStatus'] = 'Status';
			$fields['OpenTime'] = 'Open Time';
			$fields['ClosedTime'] = 'Close Time';
			$fields['Priority'] = 'Priority';
			$fields['PCCategory'] = 'Category';
			$fields['SiteCategory'] = 'Subcategory';
			$fields['ProductType'] = 'Product Type';
			$fields['ProblemType'] = 'Problem Type';
			$fields['ConfigurationItem'] = 'Asset ID';
			$fields['PrimaryAssignmentGroup'] = 'Assignment';
			$fields['IncidentDescription'] = 'Description';
			$fields['JournalUpdates'] = 'Updates';
			$fields['Resolution'] = 'Resolution';
			break;
		case "Network Services":
			$fields['IncidentID'] = 'IM Number';
			$fields['Location'] = 'Location';
			$fields['SiteID'] = 'Site ID';
			$fields['EmergencyContact'] = 'Contact Info';
			$fields['Contact'] = 'Reported By';
			$fields['IMTicketStatus'] = 'Status';
			$fields['OpenTime'] = 'Open Time';
			$fields['ClosedTime'] = 'Close Time';
			$fields['Priority'] = 'Priority';
			$fields['ConfigurationItem'] = 'Affected Item';
			$fields['CircuitID'] = 'Circuit ID';
			$fields['BillingType'] = 'Release for Testing';
			$fields['DeliveryDate'] = 'Release Time';
			$fields['ReclaimPallets'] = 'Vendor Severity';
			$fields['ReclaimBoxes'] = 'Symptom Code';
			$fields['Graffiti'] = 'Vendor Ticket Number';
			$fields['PrimaryAssignmentGroup'] = 'Assignment';
			$fields['IncidentDescription'] = 'Description';
			$fields['JournalUpdates'] = 'Updates';
			$fields['Resolution'] = 'Resolution';
			break;
		case "Warehouse":
			$fields['IncidentID'] = 'IM Number';
			$fields['Location'] = 'Location';
			$fields['SiteID'] = 'Site ID';
			$fields['EmergencyContact'] = 'Contact Info';
			$fields['Contact'] = 'Reported By';
			$fields['IMTicketStatus'] = 'Status';
			$fields['OpenTime'] = 'Open Time';
			$fields['ClosedTime'] = 'Close Time';
			$fields['Priority'] = 'Priority';
			$fields['WarehouseIssue'] = 'Issue';
			$fields['RetailCenter'] = 'Retail Center';
			$fields['CauseCode'] = 'Reason Code';
			$fields['PayrollNo'] = 'Credit Status';
			$fields['BriefDescription'] = 'AnpQaNeedReg';
			$fields['PrimaryAssignmentGroup'] = 'Assignment';
			$fields['IncidentDescription'] = 'Description';
			$fields['JournalUpdates'] = 'Updates';
			$fields['Resolution'] = 'Resolution';
			break;
		case "Operation":
			$fields['IncidentID'] = 'IM Number';
			$fields['IMTicketStatus'] = 'Status';
			$fields['OpenTime'] = 'Open Time';
			$fields['ClosedTime'] = 'Close Time';
			$fields['Priority'] = 'Priority';
			$fields['AppQualifier'] = 'Application Qualifier';
			$fields['Subcomponent'] = 'Application Name';
			$fields['JobName'] = 'Job Name';
			$fields['DevType'] = 'Backup Related';
			$fields['ANPAffected'] = 'Server Name';
			$fields['Floor'] = 'Rack Number';
			$fields['PrimaryAssignmentGroup'] = 'Assignment';
			$fields['IncidentDescription'] = 'Description';
			$fields['JournalUpdates'] = 'Updates';
			$fields['Resolution'] = 'Resolution';
			break;
		case "Emergency":
			$fields['IncidentID'] = 'IM Number';
			$fields['TITLE_1'] = 'Location Information';
			$fields['Location'] = 'Store #';
			$fields['SiteID'] = 'Site ID';
			$fields['Contact'] = 'Reported By';
			$fields['ANPCorn'] = 'Reported by title';
			$fields['AnpOtherReturn'] = 'Caller is MIC/PIC';
			$fields['AlternateContact'] = 'MIC/PIC name';
			$fields['Dept'] = 'MIC/PIC cell phone';
			$fields['TITLE_2'] = 'Emergency Alert Types';
			//$fields['EmergencyAlert'] = '';
			$fields['AnpWarehouseDept2'] = 'Full Power Outage';
			$fields['CustomerNumber'] = 'Partial Power Outage';
			$fields['BillingType'] = 'Gas Leak';
			$fields['AnpInvoiceNumber'] = 'Civil Unrest';
			$fields['AnpWarehouseNumber'] = 'Fire';
			$fields['AnpSealOn'] = 'Flood';
			$fields['AnpSealOff'] = 'Structural';
			$fields['AnpToStore'] = 'Refrigeration';
			$fields['ANPRobbery'] = 'Robbery';
			$fields['ANPBurglary'] = 'Burglary';
			$fields['ANPPolice'] = 'Police Investigation';
			$fields['ANPFatality'] = 'Fatality';
			$fields['ANPMedia'] = 'Any Incident Likely to Draw Media Attention';
			$fields['Phone'] = 'Other';
/*			$fields['AnpFromStore'] = 'Fire Location';
			$fields['AnpTrailerType'] = 'Flood Location';
			$fields['AnpBails'] = 'Structural Location';
			$fields['AnpWood'] = 'Product Location';
			$fields['ProductType'] = 'Other Issue';
*/			$fields['TITLE_3'] = 'Additional Information';
			$fields['ANPClep'] = 'Store Closed';
			$fields['AnpOrange'] = 'Police /Fire on site';
			$fields['ReclaimPallets'] = 'Store Mgr Notified';
			$fields['AnpOrderPollDate'] = 'Closed Since';
			$fields['ANPReclaimBoxes'] = 'Power Authority Status';
			$fields['TITLE_4'] = 'Refrigeration Information';
			$fields['AnpPlastic'] = 'Product Protected';
			$fields['AnpPlasticPallet'] = 'Dry Ice Ordered';
			$fields['AnpStoreToStorePallet'] = 'Store AC working';
			$fields['AnpStoreToWhsePallet'] = 'USM contacted';
			$fields['Graffiti'] = 'Cost of Product at risk';
//			$fields['TITLE_5'] = 'Contact Information';
			$fields['EmergencyContact'] = 'Contact Info';
			//$fields['TITLE_6'] = '';
			$fields['IncidentDescription'] = 'Description';
			$fields['JournalUpdates'] = 'Updates';
			$fields['Resolution'] = 'Resolution';
			break;
		case "BMC":
			$fields['IncidentID'] = 'IM Number';
			$fields['IMTicketStatus'] = 'Status';
			$fields['OpenTime'] = 'Open Time';
			$fields['ClosedTime'] = 'Close Time';
			$fields['Priority'] = 'Priority';
			$fields['ConfigurationItem'] = 'Tool ID';
			$fields['ReferenceNo'] = 'Alert ID';
			$fields['DevType'] = 'Object ID';
			$fields['NetworkName'] = 'Network Name';
			$fields['FailingComponent'] = 'Failing Component';
			$fields['Location'] = 'Server';
			$fields['PrimaryAssignmentGroup'] = 'Assignment';
			$fields['IncidentDescription'] = 'Description';
			$fields['JournalUpdates'] = 'Updates';
			$fields['Resolution'] = 'Resolution';
			break;
		default:
			$fields['IncidentID'] = 'IM Number';
			$fields['IMTicketStatus'] = 'Status';
			$fields['OpenTime'] = 'Open Time';
			$fields['ClosedTime'] = 'Close Time';
			$fields['Priority'] = 'Priority';
			$fields['ConfigurationItem'] = 'Tool ID';
			$fields['ReferenceNo'] = 'Alert ID';
			$fields['DevType'] = 'Object ID';
			$fields['NetworkName'] = 'Network Name';
			$fields['FailingComponent'] = 'Failing Component';
			$fields['Location'] = 'Server';
			$fields['PrimaryAssignmentGroup'] = 'Assignment';
			$fields['IncidentDescription'] = 'Description';
			$fields['JournalUpdates'] = 'Updates';
			$fields['Resolution'] = 'Resolution';
			break;
	}

	foreach($fields as $key => $name) {
		if(substr($key,0,5) == "TITLE") {
			if($name == "Refrigeration Information"){
				if(!isset($im['AnpWood']) || $im['AnpWood'] != "true") continue;
			}
			$rows[] = array("","<h5>".$name."</h5>");
		} else {
			if(isset($im[$key])) {
				if(is_array($im[$key])) {
					$rows[] = array("<b>".$name."</b>",implode("<br />",$im[$key]));
				} else {
					$rows[] = array("<b>".$name."</b>",$im[$key]);
				}
			}	
		}	
	}
	return(theme('table',array('header' => $header,'rows' => $rows)));
}

function service_manager_store_emergency_contact($location = NULL) {
	$return = "";
	if($location == NULL && isset($_POST['location'])) {
		$location = $_POST['location'];
	}
	if($location == NULL) {
		$return .= "<form method='POST' action='/".request_path()."'>";
		$return .= "Enter Store Number: <input type='text' name='location'> <input type='submit'></form>";
		return(t($return));
	}
	
	$sc = variable_get('service_manager_config_wsdl_client_url', '');
	$sc_user = variable_get('service_manager_username','');
	$sc_pass = variable_get('service_manager_password','');

        $client = new nusoap_client($sc, 'wsdl', false, false, false, false, 0, 600);
        $err = $client->getError();
        if ($err) {
                return('<h2>Constructor error</h2><pre>' . $err . '</pre>');
        }
        $client->setCredentials($sc_user, $sc_pass);

	$query = 'Location="'.$location.'"';
	$keys = new soapval('keys','LocationKeysType',"","http://servicecenter.peregrine.com/PWS",false,array("query" => $query));
	$instance = new soapval("instance","LocationInstanceType","","http://servicecenter.peregrine.com/PWS");
	$model = new soapval("model", "LocationModelType",array($keys,$instance),null,"http://servicecenter.peregrine.com/PWS");
	$RetrieveLocationRequest = new soapval("RetrieveLocationRequest","RetrieveLocationRequestType",$model,"http://servicecenter.peregrine.com/PWS");
	$result = $client->call('RetrieveLocation',$RetrieveLocationRequest->serialize('literal'),"http://servicecenter.peregrine.com/PWS");
	
        if ($client->fault) {
                return("Client fault");
        } else {
                $err = $client->getError();
                if ($err) {
                        return("Client error: ".$err);
		}
	}

	$return .= "<h3>".$location."</h3>";
	$header = array("Title","Name");
	$rows = array();

	$displayUsers = array(
		'Maintenance Manager' => $result['model']['instance']['AnpMainteanceManager'],
		'District Manager' => $result['model']['instance']['AnpDictrictManager'],
		'Asset Protection Specialist' => $result['model']['instance']['AnpAssetProtectionSpecialist'],
		'Store Support Manager' => $result['model']['instance']['AnpSpecialist'],
		'Champion of Banner' => $result['model']['instance']['AnpVpOperations'],
		'OE Specialist' => $result['model']['instance']['AnpOeSpecialist'],
		'Support Services Director' => $result['model']['instance']['AnpDsa'],
	);
	if(isset($result['model']['instance']['RXDM'])) {
		$displayUsers['RX District Manager'] = $result['model']['instance']['RXDM'];
	}
	$displayAttributes = array(
		'Name' => 'cn',
		'E-Mail' => 'mail',
		'Mobile' => 'mobile',
		'Office' => 'telephonenumber',
	);

	foreach($displayUsers as $title => $username) {
		$ldap_user = service_manager_ldap_lookup($username);
		if($ldap_user['count'] > 0) {
			$sub_rows = array();
			foreach($displayAttributes as $attrName => $attr) {
				if(isset($ldap_user[0][$attr][0])) $sub_rows[] = array("<b>".$attrName."</b>",$ldap_user[0][$attr][0]);
			}
			$tbl = theme('table',array('header' => array(),'rows' => $sub_rows));
			$div = theme('ctools_collapsible',array('handle' => $username, 'content' => $tbl, 'collapsed' => TRUE));
			$rows[] = array("<b>".$title."</b>",$div);
		} else {
			$rows[] = array("<b>".$title."</b>",$username);
		}
	}

	$return .= theme('table',array('header' => $header,'rows' => $rows));

	return(t($return));
}

function service_manager_ldap_lookup($username) {
	// Get all enabled enabled servers.
	if ($ldap_servers = ldap_servers_get_servers(NULL, 'enabled')) {
		// Get first server.
		$ldap_server = current($ldap_servers);
		//return("<pre>".print_r($ldap_server,TRUE)."</pre>");

		if ($results = $ldap_server->search($ldap_server->basedn[0],'samaccountname='.$username)) {
			return($results);
		} else {
			return(t("No LDAP result found for username: ".$username));
		}
	}
}
