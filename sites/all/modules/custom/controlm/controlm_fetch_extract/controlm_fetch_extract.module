<?php

function controlm_fetch_extract_menu () {
	$items = array();
	$items['admin/config/services/controlm/fetch_extract'] = array(
		'title' => 'Fetch Extract',
		'description' => 'Configuration for Control-M Fetch Extract module',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('controlm_fetch_extract_form'),
		'access arguments' => array('access controlm administration'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 3,
	);
	$items['controlm/fetch_extract'] = array(
		'title' => 'Fetch Extract Data',
		'page callback' => 'controlm_fetch_extract_execute',
		'access arguments' => array('access controlm data feeds'),
		'type' => MENU_NORMAL_ITEM,
	);
	return $items;
}
function controlm_fetch_extract_execute() {
  return array('#markup' => '<p>' . t(_controlm_fetch_extract_main()) . '</p>');
}
function controlm_fetch_extract_form ($form, &$form_state) {
	$form['controlm_fetch_extract_cron'] = array(
		'#type' => 'checkbox',
		'#title' => t('Run during Cron?'),
		'#default_value' => variable_get('controlm_fetch_extract_cron',1),
		'#description' => t('Do we want to run the fetch periodically through cron?'),
		'#required' => FALSE,
	);
	$form['controlm_fetch_extract_interval'] = array(
		'#type' => 'textfield',
		'#title' => t('Cron Interval'),
		'#default_value' => variable_get('controlm_fetch_extract_interval',3600),
		'#size' => 10,
		'#maxlength' => 10,
		'#description' => t('The number of seconds between Cron executions.'),
		'#required' => TRUE,
	);
	$form['controlm_fetch_extract_username'] = array(
		'#type' => 'textfield',
		'#title' => t('User Name'),
		'#default_value' => variable_get('controlm_fetch_extract_username',''),
		'#size' => 10,
		'#maxlength' => 20,
		'#description' => t('The username that has access to the "exportdeftable" command.'),
		'#required' => TRUE,
	);
	$form['controlm_fetch_extract_password'] = array(
		'#type' => 'password',
		'#title' => t('User Password'),
		'#default_value' => variable_get('controlm_fetch_extract_password',''),
		'#size' => 10,
		'#maxlength' => 20,
		'#description' => t('The password for above user.'),
		'#required' => TRUE,
	);
	return system_settings_form($form);
}
function controlm_fetch_extract_form_validate ($form, &$form_state) {
	if(!ctype_digit(strval($form_state['values']['controlm_fetch_extract_interval']))) {
		form_set_error('controlm_fetch_extract_interval', t('Interval value must be an integer.'));
	}
	if($form_state['values']['controlm_fetch_extract_interval'] <= 0) {
		form_set_error('controlm_fetch_extract_interval', t('Interval value must be greater than zero.'));
	}
}
function controlm_fetch_extract_cron() {
	$enabled = variable_get('controlm_fetch_extract_cron',0);
	if($enabled = 1) {
		$interval = variable_get('controlm_fetch_extract_interval',3600);
		if (time() >= variable_get('controlm_fetch_extract_cron_next_execution', 0)) {
			drupal_set_time_limit(0);
			$res = _controlm_fetch_extract_main();
			watchdog('controlm_fetch_extract', 'controlm_fetch_extract_cron ran');
			variable_set('controlm_fetch_extract_cron_next_execution', time() + $interval);
		}
	}
}


function _controlm_fetch_extract_main() {
	ini_set('memory_limit','1G');
	ini_set('max_execution_time',0);

	$dbTables = array("cm_job_info","cm_sched_table","cm_job_properties","cm_prop_types","cm_job_on_properties","cm_on_types");
	$return = "";

	$pwd = dirname(__FILE__);
	$extract_settings_file = $pwd.'/extract_settings.xml';
	$extract_file = '/tmp/opsys.xml';
	$remote_extract_settings_file = '/tmp/extract_settings.xml';
	$remote_extract_file = '/tmp/opsys.xml';	

        $hostname = variable_get('controlm_hostname', '');
        $username = variable_get('controlm_em_username', '');
        $identity = variable_get('controlm_identity_file', '');
        $known_hosts = variable_get('controlm_known_hosts_file', '');
	$app_user = variable_get('controlm_fetch_extract_username','');
	$app_pass = variable_get('controlm_fetch_extract_password','');

	$db_type = variable_get('controlm_em_db_type',array());
        switch($db_type) {
                case 'standard':
                        global $databases;
                        if(!isset($databases['ctmem'])) {
                                drupal_set_message('There must be a database defined for "ctmem"','error');
                                return;
                        }
			$remote_db_user = $databases['ctmem']['default']['username'];
			$remote_db_pass = $databases['ctmem']['default']['password'];
			$remote_db_host = $databases['ctmem']['default']['host'];
                        break;
                case 'oci8':
                        $oci8 = variable_get('oci8',array());
                        if(!isset($oci8['databases']['ctmem'])) {
                                drupal_set_message('There must be an OCI8 database defined for "ctmem"','error');
                                return;
                        }
			$remote_db_user = $oci8['databases']['ctmem']['default']['username'];
			$remote_db_pass = $oci8['databases']['ctmem']['default']['password'];
			$remote_db_host = $oci8['databases']['ctmem']['default']['hosts'][0];
                        break;
                default:
                        drupal_set_message('Unknown DB driver '.$db_type.'.','error');
			return;
	}

        $cmds = array(
		'ssh -i '.$identity.' -o UserKnownHostsFile='.$known_hosts.' '.$username.'@'.$hostname.' "whoami" 2>&1',
		'scp -i '.$identity.' -o UserKnownHostsFile='.$known_hosts.' '.$extract_settings_file.' '.$username.'@'.$hostname.':'.$remote_extract_settings_file.' 2>&1',
		'ssh -i '.$identity.' -o UserKnownHostsFile='.$known_hosts.' '.$username.'@'.$hostname.' "exportdeftable -u '.$app_user.' -p '.$app_pass.' -s '.$remote_db_host.' -arg '.$remote_extract_settings_file.' -out '.$remote_extract_file.' 2>&1" 2>&1',
		'scp -i '.$identity.' -o UserKnownHostsFile='.$known_hosts.' '.$username.'@'.$hostname.':'.$remote_extract_file.' '.$extract_file.' 2>&1',
	);
	foreach($cmds as $cmd) {
		$output = "";
	        exec($cmd,$output,$rc);
//	        $return .= "<pre>".print_r($output,TRUE)."</pre>";
		if($rc !== 0) {
			drupal_set_message('Command returned error '.$rc.': '.$cmd,'error');
			dsm($output);
			return;
		}
	}

	$contents = file_get_contents($extract_file);
	$ctmExportXML = simplexml_load_string($contents, 'SimpleXMLElement', LIBXML_COMPACT | LIBXML_PARSEHUGE);
	$ctmExport = object_to_array($ctmExportXML);
//	$return .= "<pre>".print_r($ctmExport,TRUE)."</pre>";
//	return($return);
	unset($contents);

	foreach($dbTables as $tbl) {
		$return .= "Truncating table ".$tbl."...";
		db_truncate($tbl)->execute();
		$return .= "Done<br />";
	}

	if(isset($ctmExport['SMART_FOLDER'])) {
		$return .= _controlm_fetch_extract_insert_smart_folder($ctmExport['SMART_FOLDER'],"FOLDER_NAME");
	}
	if(isset($ctmExport['SCHED_TABLE'])) {
		$return .= _controlm_fetch_extract_insert_tables($ctmExport['SCHED_TABLE'],"TABLE_NAME");
	}
	if(isset($ctmExport['FOLDER'])) {
		$return .= _controlm_fetch_extract_insert_tables($ctmExport['FOLDER'],"FOLDER_NAME");
	}

	return($return);
}

function _controlm_fetch_extract_insert_smart_folder($folder,$name_field) {
//	return("<pre>".print_r($folder,TRUE)."</pre>");

	if(isset($folder[0])) {
		foreach($folder as $subfolder) {
			$fields[]['@attributes'] = array(
				'DATACENTER' => $subfolder['@attributes']['DATACENTER'],
				$name_field => $subfolder['@attributes'][$name_field],
				'USED_BY_CODE' => $subfolder['@attributes']['USED_BY_CODE'],
				'LAST_UPLOAD' => $subfolder['@attributes']['LAST_UPLOAD'],
				'REAL_FOLDER_ID' => $subfolder['@attributes']['REAL_FOLDER_ID'],
				'PLATFORM' => $subfolder['@attributes']['PLATFORM'],
				'TYPE' => $subfolder['@attributes']['TYPE'],
				'VERSION' => $subfolder['@attributes']['VERSION'],
				'FOLDER_ORDER_METHOD' => $subfolder['@attributes']['FOLDER_ORDER_METHOD'],	
			);
			$fields[]['JOB'] = $subfolder['JOB'];
		}
	} else {
		$fields[0]['@attributes'] = array(
			'DATACENTER' => $folder['@attributes']['DATACENTER'],
			$name_field => $folder['@attributes'][$name_field],
			'USED_BY_CODE' => $folder['@attributes']['USED_BY_CODE'],
			'LAST_UPLOAD' => $folder['@attributes']['LAST_UPLOAD'],
			'REAL_FOLDER_ID' => $folder['@attributes']['REAL_FOLDER_ID'],
			'PLATFORM' => $folder['@attributes']['PLATFORM'],
			'TYPE' => $folder['@attributes']['TYPE'],
			'VERSION' => $folder['@attributes']['VERSION'],
			'FOLDER_ORDER_METHOD' => $folder['@attributes']['FOLDER_ORDER_METHOD'],	
		);
		$fields[0]['JOB'] = $folder['JOB'];
	}
	return(_controlm_fetch_extract_insert_tables($fields,$name_field));
}

function _controlm_fetch_extract_insert_tables($sched_tables,$name_field) {
	$return = "";
	foreach($sched_tables as $table) {
		if(isset($table['@attributes'])) {
			foreach($table['@attributes'] as $k => $v) {
				if($k == "LAST_UPLOAD") $v = date('Y-m-d H:i:s',strtotime($v));
				switch($k) {
					case "LAST_UPLOAD":
						$v = date('Y-m-d H:i:s',strtotime($v));
						break;
					case "TABLE_NAME":
						$k = "FOLDER_NAME";
						break;
				}
				$att['CMT_'.$k] = $v;
			}
			$return .= "Inserting schedule table ".htmlspecialchars($table['@attributes'][$name_field])." into cm_sched_table...";
			$tblInsId = db_insert('cm_sched_table')->fields($att)->execute();
			$return .= "Done<br />";
			unset($att);
		} else {
			dsm($table);
		}

		foreach($table['JOB'] as $job) {
			if(!isset($job['@attributes']) || !isset($job['@attributes']['JOBNAME'])) continue;
			foreach($job['@attributes'] as $k => $v) {
				$att['CMJI_'.$k] = trim($v);
			}
			$att['CMJI_TABLE_ID'] = $tblInsId;
			$return .= "&rdsh;Inserting job ".htmlspecialchars($job['@attributes']['JOBNAME'])." into cm_job_info...";
			$jobInsId = db_insert('cm_job_info')->fields($att)->execute();
			$return .= "Done<br />";
			unset($att);

			unset($job['@attributes']);
			foreach($job as $property => $attributes) {
				if(isset($attributes['@attributes'])) {
					cmInsertJobProperty($attributes,$property,$jobInsId,$known_attr,$known_attr_on,$return);
				} else {
					foreach($attributes as $num => $attr) {
						cmInsertJobProperty($attr,$property,$jobInsId,$known_attr,$known_attr_on,$return,$num);
					}
				}
			}
		}
	}

	$return .= "<p>Processing Complete</p>";
	return $return;
}
function cmInsertJobProperty($attributes,$property,$jobInsId,&$known_attr,&$known_attr_on,&$return,$num=0) {
	foreach($attributes['@attributes'] as $k => $v) {
		if(isset($known_attr[$property][$k])) {
			$typeInsId = $known_attr[$property][$k]['id'];
		} else {
			$data = array(
				'CMPT_TYPE_NAME' => $property,
				'CMPT_VAR' => $k);
			$typeInsId = db_insert('cm_prop_types')->fields($data)->execute();
			$known_attr[$property][$k]['id'] = $typeInsId;
		}
		$return .= "&mid;&nbsp;&rdsh;Inserting job property ".htmlspecialchars($property)."/".$k."/".$v." into cm_job_properties...";
		$data = array(
			'CMJP_JOB_ID' => $jobInsId,
			'CMJP_TYPE' => $typeInsId,
			'CMJP_VALUE' => trim($v),
			'CMJP_NUM' => $num);
		db_insert('cm_job_properties')->fields($data)->execute();
		$return .= "Done<br />";
	}
	if($property == "ON") {
		unset($attributes['@attributes']);
		foreach($attributes as $onKey => $onStuff) {
			if(isset($onStuff['@attributes'])) {
				cmInsertOnProperty($onStuff,$onKey,$jobInsId,$typeInsId,$known_attr_on,$return);
			} else {
				foreach($onStuff as $onNum => $onAttr) {
					cmInsertOnProperty($onStuff,$onKey,$jobInsId,$typeInsId,$known_attr_on,$return,$onNum);
				}
			}
		}
	}
}
function cmInsertOnProperty($attributes,$onKey,$jobInsId,$typeInsId,&$known_attr_on,&$return,$num=0,$subnum=0) {
	if(isset($attributes['@attributes'])) {
		foreach($attributes['@attributes'] as $k => $v) {
			if(isset($known_attr_on[$onKey][$k])) {
				$onInsId = $known_attr_on[$onKey][$k]['id'];
			} else {
				$data = array(
					'CMOT_TYPE_NAME' => $onKey,
					'CMOT_VAR' => $k);
				$onInsId = db_insert('cm_on_types')->fields($data)->execute();
				$known_attr_on[$onKey][$k]['id'] = $onInsId;
			}
			$return .= "&mid;&nbsp;&mid;&nbsp;&rdsh;Inserting job ON property ".htmlspecialchars($onKey)."/".$k."/".$v." into cm_job_on_properties...";
			$data = array(
				'CMJOP_JOB_ID' => $jobInsId,
				'CMJOP_PROP_TYPE' => $typeInsId,
				'CMJOP_ON_TYPE' => $onInsId,
				'CMJOP_VALUE' => trim($v),
				'CMJOP_NUM' => $num,
				'CMJOP_SUBNUM' => $subnum);
			db_insert('cm_job_on_properties')->fields($data)->execute();
			$return .= "Done<br />";
		}
	} else {
		foreach($attributes as $subNum =>$attr) {
			cmInsertOnProperty($attr,$onKey,$jobInsId,$typeInsId,$known_attr_on,$return,$num,$subNum);
		}
	}
}



function object_to_array($obj) {
        $_arr = is_object($obj) ? (array) $obj : $obj;
        foreach ($_arr as $key => $val) {
                $val = (is_array($val) || is_object($val)) ? object_to_array($val) : $val;
                $arr[$key] = $val;
        }
        return $arr;
}

