<?php

function controlm_calc_trending_menu () {
	$items = array();
	$items['admin/config/services/controlm/calc_trending'] = array(
		'title' => 'Control-M Calculate Trending',
		'description' => 'Configuration for Control-M Calculate Trending module',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('controlm_calc_trending_form'),
		'access arguments' => array('access controlm administration'),
		'type' => MENU_NORMAL_ITEM,
	);
	$items['controlm/calc_trending'] = array(
		'title' => 'Calculate Trending',
		'page callback' => 'controlm_calc_trending_execute',
		'access arguments' => array('access controlm data feeds'),
		'type' => MENU_NORMAL_ITEM,
	);
	return $items;
}
function controlm_calc_trending_execute() {
  return array('#markup' => '<p>' . t(cmCalcTrending()) . '</p>');
}
function controlm_calc_trending_form ($form, &$form_state) {
	$form['controlm_calc_trending_num_execs'] = array(
		'#type' => 'textfield',
		'#title' => t('Number of Executions'),
		'#default_value' => variable_get('controlm_calc_trending_num_execs',10),
		'#size' => 10,
		'#maxlength' => 10,
		'#description' => t('The number of job executions to count in trending.'),
		'#required' => TRUE,		
	);
	$form['controlm_calc_trending_alarm_threshold'] = array(
		'#type' => 'textfield',
		'#title' => t('Alarm Threshold'),
		'#default_value' => variable_get('controlm_calc_trending_alarm_threshold','0.2'),
		'#size' => 10,
		'#maxlength' => 10,
		'#description' => t('Threshold of trend change to set Alarm.'),
		'#required' => TRUE,		
	);
	$form['controlm_calc_trending_cron'] = array(
		'#type' => 'checkbox',
		'#title' => t('Run during Cron?'),
		'#default_value' => variable_get('controlm_calc_trending_cron',1),
		'#description' => t('Do we want to run periodically through cron?'),
		'#required' => FALSE,
	);
	$form['controlm_calc_trending_interval'] = array(
		'#type' => 'textfield',
		'#title' => t('Cron Interval'),
		'#default_value' => variable_get('controlm_calc_trending_interval',3600),
		'#size' => 10,
		'#maxlength' => 10,
		'#description' => t('The number of seconds between Cron executions.'),
		'#required' => TRUE,
	);
	return system_settings_form($form);
}
function controlm_calc_trending_form_validate ($form, &$form_state) {
	if(!ctype_digit(strval($form_state['values']['controlm_calc_trending_interval']))) {
		form_set_error('controlm_calc_trending_interval', t('Interval value must be an integer.'));
	}
	if($form_state['values']['controlm_calc_trending_interval'] <= 0) {
		form_set_error('controlm_calc_trending_interval', t('Interval value must be greater than zero.'));
	}
	if(!ctype_digit(strval($form_state['values']['controlm_calc_trending_num_execs']))) {
		form_set_error('controlm_calc_trending_num_execs', t('Number of Executions value must be an integer.'));
	}
	if($form_state['values']['controlm_calc_trending_num_execs'] <= 0) {
		form_set_error('controlm_calc_trending_num_execs', t('Number of executions value must be greater than zero.'));
	}
	if(!is_numeric($form_state['values']['controlm_calc_trending_alarm_threshold'])) {
		form_set_error('controlm_calc_trending_alarm_threshold', t('Alarm Threshold value must be an integer.'));
	}
	if($form_state['values']['controlm_calc_trending_alarm_threshold'] <= 0) {
		form_set_error('controlm_calc_trending_alarm_threshold', t('Alarm Threshold must be greater than zero.'));
	}
}
function controlm_calc_trending_cron() {
	$enabled = variable_get('controlm_calc_trending_cron',0);
	if($enabled = 1) {
		$interval = variable_get('controlm_calc_trending_interval',3600);
		if (time() >= variable_get('controlm_calc_trending_next_execution', 0)) {
			drupal_set_time_limit(0);
			$res = cmCalcTrending();
			watchdog('controlm_calc_trending', 'controlm_calc_trending_cron ran');
			variable_set('controlm_calc_trending_next_execution', time() + $interval);
		}
	}
}


function cmCalcTrending() {

	ini_set('memory_limit','1G');
	ini_set('max_execution_time',0);

	db_set_active('bip');

	$num_execs = variable_get('controlm_calc_trending_num_execs',10);
	$threshold = variable_get('controlm_calc_trending_alarm_threshold','0.2');

	$return = ""; $return2 = "";
	$return .= "<p>Threshold: ".$threshold."<br />";
	$return .= "Number of executions to count: ".$num_execs."</p>";

	$rs_trends = db_select('cm_job_trend','cjt')->fields('cjt',array('cmjt_job_name','cmjt_node_id','cmjt_last_run'))->execute();
	while($rec_trends = $rs_trends->fetchAssoc()) {
		$trends[$rec_trends['cmjt_job_name']][$rec_trends['cmjt_node_id']] = $rec_trends['cmjt_last_run'];
	}

	$query = db_select('cm_jobs_run','cjr')->fields('cjr',array('cmjr_job_name','cmjr_node_id'));
	$query->groupBy('cmjr_job_name')->groupBy('cmjr_node_id');
	$query->addExpression('MAX(cmjr_timestamp)','lastrun');
	$result = $query->execute();
	while($record = $result->fetchAssoc()) {
		if(!isset($trends[$record['cmjr_job_name']][$record['cmjr_node_id']]) ||
			strtotime($trends[$record['cmjr_job_name']][$record['cmjr_node_id']]) < strtotime($record['lastrun'])) {
			$jobs[$record['cmjr_job_name']][$record['cmjr_node_id']] = array('lastrun' => $record['lastrun']);
		} else {
			$return2 .= "<p>Job ".$record['cmjr_job_name'].", Node ".$record['cmjr_node_id']." does not need to have trending updated.<br />";
			$return2 .= "Trend time: ".$trends[$record['cmjr_job_name']][$record['cmjr_node_id']]."<br />";
			$return2 .= "Last Run: ".$record['lastrun']."</p>";
		}
	}

	if(isset($jobs)) {
		foreach($jobs as $job => $nodes) {
			foreach($nodes as $node => $runs) {
				$return .= "Job ".$job.", Node ".$node." needs to have trending updated.<br />";

				$lastrun = $runs['lastrun'];
				unset($runs['lastrun']);

				$query = db_select('cm_jobs_run','cjr')
					->fields('cjr',array('cmjr_elapsed_time'))
					->condition('cmjr_job_name',$job,'=')
					->condition('cmjr_node_id',$node,'=')
					->orderBy('cmjr_timestamp','DESC')
					->range(0,$num_execs);
				$result = $query->execute();
				while($record = $result->fetchAssoc()) {
					$runs[] = $record['cmjr_elapsed_time'];
				}
				foreach($runs as $k => $v) {
					$arrayX[] = $k;
					$arrayY[] = $v;
				}
				$trend = corrCoef($arrayX,$arrayY)*-1;
				unset($arrayX); unset($arrayY);

				$alarm_txt = NULL;
				if($trend > $threshold) {
					$alarm_txt = "TREND_UP";
				} elseif($trend < -1*$threshold) {
					$alarm_txt = "TREND_DOWN";
				} else {
					$alarm_txt = NULL;
				}
	
				$return .= "<p>".$job." (".$node.") = ".$trend." - ".$alarm_txt."</p>";
				$keys = array(
					'cmjt_job_name' => $job,
					'cmjt_node_id' => $node,
				);
				$fields = array(
					'cmjt_last_run' => $lastrun,
					'cmjt_last_time' => $runs[0],
					'cmjt_trend' => round($trend,4),
					'cmjt_alarm' => $alarm_txt,
				);
				db_merge('cm_job_trend')->key($keys)->fields($fields)->execute();
			}
		}
	}

/*
	foreach($jobs as $jobname => $nodes) {
		foreach($nodes as $nodename => $jobruns) {
			$update = FALSE;
			if(!isset($trends[$jobname][$nodename])) {
				$trends[$jobname][$nodename] = "";
				$update = TRUE;
				$alarm_txt = NULL;
				$trend =0;
			}

			$lastrun = $jobruns[0]['timestamp'];
			$lasttime = $jobruns[0]['runtime'];
			if($lastrun != $trends[$jobname][$nodename]) {
				foreach($jobruns as $k => $v) {
					$arrayX[] = $k;
					$arrayY[] = $v['runtime'];
				}
				$trend = corrCoef($arrayX,$arrayY)*-1;
				unset($arrayX); unset($arrayY);
				//$jobs[$jobname][$nodename]['trend'] = $trend;

				if($trend > $threshold) {
					$update = TRUE;
					$alarm_txt = "TREND_UP";
				} elseif($trend < -1*$threshold) {
					$update = TRUE;
					$alarm_txt = "TREND_DOWN";
				} else {
					$update = TRUE;
					$alarm_txt = NULL;
				}
			}

			if($update) {
				$return .= "<p>".$jobname." (".$nodename.") = ".$trend." - ".$alarm_txt."</p>";
				$keys = array(
					'cmjt_job_name' => $jobname,
					'cmjt_node_id' => $nodename,
				);
				$fields = array(
					'cmjt_last_run' => $lastrun,
					'cmjt_trend' => round($trend,4),
					'cmjt_alarm' => $alarm_txt,
				);
				db_merge('cm_job_trend')->key($keys)->fields($fields)->execute();
			}
		}
	}
*/
	//$return .= "<pre>".print_r($jobs,TRUE)."</pre>";
	
	db_set_active();
	return($return.$return2);
}

