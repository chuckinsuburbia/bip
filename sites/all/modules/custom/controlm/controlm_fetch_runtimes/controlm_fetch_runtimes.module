<?php

function controlm_fetch_runtimes_menu () {
	$items = array();
	$items['admin/config/services/controlm/fetch_runtimes'] = array(
		'title' => 'Fetch Run Times',
		'description' => 'Configuration for Control-M Fetch Run Times module',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('controlm_fetch_runtimes_form'),
		'access arguments' => array('access controlm administration'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 5,
	);
	$items['controlm/fetch_runtimes'] = array(
		'title' => 'Fetch Run Time Data',
		'page callback' => 'controlm_fetch_runtimes_execute',
		'access arguments' => array('access controlm data feeds'),
		'type' => MENU_NORMAL_ITEM,
	);
	return $items;
}
function controlm_fetch_runtimes_execute() {
  return array('#markup' => '<p>' . t(cmGetRuntime()) . '</p>');
}
function controlm_fetch_runtimes_form ($form, &$form_state) {
	$form['controlm_fetch_runtimes_cron'] = array(
		'#type' => 'checkbox',
		'#title' => t('Run during Cron?'),
		'#default_value' => variable_get('controlm_fetch_runtimes_cron',1),
		'#description' => t('Do we want to run the fetch periodically through cron?'),
		'#required' => FALSE,
	);
	$form['controlm_fetch_runtimes_interval'] = array(
		'#type' => 'textfield',
		'#title' => t('Cron Interval'),
		'#default_value' => variable_get('controlm_fetch_runtimes_interval',3600),
		'#size' => 10,
		'#maxlength' => 10,
		'#description' => t('The number of seconds between Cron executions.'),
		'#required' => TRUE,
	);
	return system_settings_form($form);
}
function controlm_fetch_runtimes_form_validate ($form, &$form_state) {
	if(!ctype_digit(strval($form_state['values']['controlm_fetch_runtimes_interval']))) {
		form_set_error('controlm_fetch_runtimes_interval', t('Interval value must be an integer.'));
	}
	if($form_state['values']['controlm_fetch_runtimes_interval'] <= 0) {
		form_set_error('controlm_fetch_runtimes_interval', t('Interval value must be greater than zero.'));
	}
}
function controlm_fetch_runtimes_cron() {
	$enabled = variable_get('controlm_fetch_runtimes_cron',0);
	if($enabled = 1) {
		$interval = variable_get('controlm_fetch_runtimes_interval',3600);
		if (time() >= variable_get('controlm_fetch_runtimes_next_execution', 0)) {
			drupal_set_time_limit(0);
			$res = cmGetRuntime();
			watchdog('controlm_fetch_runtimes', 'controlm_fetch_runtimes_cron ran');
			variable_set('controlm_fetch_runtimes_next_execution', time() + $interval);
		}
	}
}


function cmGetRuntime() {
	ini_set('memory_limit','1G');
	ini_set('max_execution_time',0);

	$return = "";

	$end   = date('YmdHis',time());
	$start = variable_get('controlm_fetch_runtimes_last_execution', date('YmdHis',time() - 86400));
	$return .= "<p>Start time: ".$start."<br />End time: ".$end."</p>";

	$db_type = variable_get('controlm_em_db_type',array());
        switch($db_type) {
                case 'standard':
                        global $databases;
                        if(!isset($databases['ctmem'])) {
                                drupal_set_message('There must be a database defined for "ctmem"','error');
                                return;
                        }
                        db_set_active('ctmem');
                        $jobs = db_select('cmr_runinf','r')
                                ->fields('r')
				->condition('TIMESTMP',$start,'>=')
                                ->execute();
                        while($job = $jobs->fetchAssoc()) {
				$return .= _controlm_fetch_runtimes_local_db_insert($job);
                        }
                        db_set_active();
                        break;
                case 'oci8':
                        $oci8 = variable_get('oci8',array());
                        if(!isset($oci8['databases']['ctmem'])) {
                                drupal_set_message('There must be an OCI8 database defined for "ctmem"','error');
                                return;
                        }
                        oci8_db_set_active('ctmem');

                        $sql = "BEGIN EMUSER.BIP_PERMISSIONS.GRANT_SELECT_TABLE; END;";
                        oci8_db_query($sql)->execute();

                        $sql = "SELECT * FROM CTMUSER.CMR_RUNINF WHERE TIMESTMP >= ".$start;
                        $job_query = oci8_db_query($sql);
                        $job_query->execute();
                        while($job = $job_query->fetchAssoc()) {
				$return .= _controlm_fetch_runtimes_local_db_insert($job);
                        }
                        break;
                default:
                        drupal_set_message('Unknown DB driver '.$db_type.'.','error');
                        return;
        }

	variable_set('controlm_fetch_runtimes_last_execution', $end);
	return($return);
}

function _controlm_fetch_runtimes_local_db_insert($job) {
	$return = "";
	$lc_job = array_change_key_case($job,CASE_LOWER);

	$timestamp = date('Y-m-d H:i:s',strtotime($lc_job['timestmp']));
	$orderid = str_pad(base_convert($lc_job['orderno'],10,36),6,'0',STR_PAD_LEFT);

	$keys = array(
		'CMJR_TIMESTAMP' => $timestamp,
		'CMJR_JOB_NAME' => $lc_job['jobname'],
		'CMJR_ORDER_ID' => $orderid,
		'CMJR_RUN' => $lc_job['runcount'],
		'CMJR_NODE_ID' => $lc_job['nodeid'],
	);
	$fields = array(
		'CMJR_MEM_NAME' => $lc_job['memname'],
		'CMJR_MEM_LIB' => $lc_job['memlib'],
		'CMJR_CPU' => $lc_job['cputime'],
		'CMJR_ELAPSED_TIME' => $lc_job['elaptime'],
	);
	$return .= "Job ".$lc_job['jobname'].", order ID ".$orderid.": ";
	$write_stat = db_merge('cm_jobs_run')->key($keys)->fields($fields)->execute();
	switch($write_stat) {
		case 1:
			$return .= "Inserted.<br />";
			break;
		case 2:
			$return .= "Updated.<br />";
			break;
		default:
			$return .= "Unexpected Result.<br />";
	}
	return($return);
}

