<?php

function controlm_create_job_average_menu () {
	$items = array();
	$items['admin/config/services/controlm/create_job_average'] = array(
		'title' => 'Update Job Averages',
		'description' => 'Configuration for Control-M Create Job Averages module',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('controlm_create_job_average_form'),
		'access arguments' => array('access controlm administration'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 7,
	);
	$items['controlm/create_job_average'] = array(
		'title' => 'Create Job Averages Table',
		'page callback' => 'controlm_create_job_average_execute',
		'access arguments' => array('access controlm data feeds'),
		'type' => MENU_NORMAL_ITEM,
	);
	return $items;
}
function controlm_create_job_average_execute() {
  return array('#markup' => '<p>' . t(cmCreateJobAvg()) . '</p>');
}
function controlm_create_job_average_form ($form, &$form_state) {
	$form['controlm_create_job_average_cron'] = array(
		'#type' => 'checkbox',
		'#title' => t('Run during Cron?'),
		'#default_value' => variable_get('controlm_create_job_average_cron',1),
		'#description' => t('Do we want to run the fetch periodically through cron?'),
		'#required' => FALSE,
	);
	$form['controlm_create_job_average_interval'] = array(
		'#type' => 'textfield',
		'#title' => t('Cron Interval'),
		'#default_value' => variable_get('controlm_create_job_average_interval',3600),
		'#size' => 10,
		'#maxlength' => 10,
		'#description' => t('The number of seconds between Cron executions.'),
		'#required' => TRUE,
	);
	return system_settings_form($form);
}
function controlm_create_job_average_form_validate ($form, &$form_state) {
	if(!ctype_digit(strval($form_state['values']['controlm_create_job_average_interval']))) {
		form_set_error('controlm_create_job_average_interval', t('Interval value must be an integer.'));
	}
	if($form_state['values']['controlm_create_job_average_interval'] <= 0) {
		form_set_error('controlm_create_job_average_interval', t('Interval value must be greater than zero.'));
	}
}
function controlm_create_job_average_cron() {
	$enabled = variable_get('controlm_create_job_average_cron',0);
	if($enabled = 1) {
		$interval = variable_get('controlm_create_job_average_interval',3600);
		if (time() >= variable_get('controlm_create_job_average_next_execution', 0)) {
			drupal_set_time_limit(0);
			$res = cmCreateJobAvg();
			watchdog('controlm_create_job_average', 'controlm_create_job_average_cron ran');
			variable_set('controlm_create_job_average_next_execution', time() + $interval);
		}
	}
}


function cmCreateJobAvg() {
	//ini_set('memory_limit','1G');
	ini_set('max_execution_time',0);

	$return = "";

	$tbl = "cm_job_average";

	//$return .= "<br />Emptying DB table ".$tbl."...";
	//dbTblEmpty($tbl);
	//$return .= "Done<br />";

	$return .= "<br />Collecting Data on jobs run...";
	$query = db_select('cm_jobs_run','cjr');
	$query->addField('cjr','cmjr_job_name','cmja_job_name');
	$query->addField('cjr','cmjr_node_id','cmja_node_id');
	$query->groupBy('cmjr_job_name')->groupBy('cmjr_node_id')->groupBy('DAYOFWEEK(cmjr_timestamp)');
	$query->addExpression('DAYOFWEEK(cmjr_timestamp)','cmja_dow');
	$query->addExpression('AVG(cmjr_elapsed_time)','cmja_average');
	$query->addExpression('MIN(cmjr_elapsed_time)','cmja_min');
	$query->addExpression('MAX(cmjr_elapsed_time)','cmja_max');
	$result = $query->execute();
	$return .= "Done<br />";
	
	$return .= "<br />Inserting data into Averages table...";
	while($record = $result->fetchAssoc()) {
//		$return .= "<pre>".print_r($record,TRUE)."</pre>";
		$merge = db_merge($tbl);
		$merge->key(array(
			'cmja_job_name' => $record['cmja_job_name'],
			'cmja_node_id' => $record['cmja_node_id'],
			'cmja_dow' => $record['cmja_dow'],
		));
		$merge->fields(array(
			'cmja_average' => $record['cmja_average'],
			'cmja_min' => $record['cmja_min'],
			'cmja_max' => $record['cmja_max'],
		));
		$merge->execute();
		usleep(10); //Sleep for 10 microseconds so other queries don't get jammed up
	}
	$return .= "Done<br />";
	
	return($return);
}

