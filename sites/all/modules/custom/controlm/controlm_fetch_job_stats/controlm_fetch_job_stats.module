<?php

function controlm_fetch_job_stats_menu () {
	$items = array();
	$items['admin/config/services/controlm/fetch_job_stats'] = array(
		'title' => 'Fetch Job Stats',
		'description' => 'Configuration for Control-M Fetch Job Stats module',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('controlm_fetch_job_stats_form'),
		'access arguments' => array('access controlm administration'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 4,
	);
	$items['controlm/fetch_job_stats'] = array(
		'title' => 'Fetch Job Stats',
		'page callback' => 'controlm_fetch_job_stats_execute',
		'access arguments' => array('access controlm data feeds'),
		'type' => MENU_NORMAL_ITEM,
	);
	return $items;
}
function controlm_fetch_job_stats_execute() {
  return array('#markup' => '<p>' . t(cmGetJobStats()) . '</p>');
}
function controlm_fetch_job_stats_form ($form, &$form_state) {
	$form['controlm_fetch_job_stats_cron'] = array(
		'#type' => 'checkbox',
		'#title' => t('Run during Cron?'),
		'#default_value' => variable_get('controlm_fetch_job_stats_cron',1),
		'#description' => t('Do we want to run the fetch periodically through cron?'),
		'#required' => FALSE,
	);
	$form['controlm_fetch_job_stats_interval'] = array(
		'#type' => 'textfield',
		'#title' => t('Cron Interval'),
		'#default_value' => variable_get('controlm_fetch_job_stats_interval',3600),
		'#size' => 10,
		'#maxlength' => 10,
		'#description' => t('The number of seconds between Cron executions.'),
		'#required' => TRUE,
	);
	return system_settings_form($form);
}
function controlm_fetch_job_stats_form_validate ($form, &$form_state) {
	if(!ctype_digit(strval($form_state['values']['controlm_fetch_job_stats_interval']))) {
		form_set_error('controlm_fetch_job_stats_interval', t('Interval value must be an integer.'));
	}
	if($form_state['values']['controlm_fetch_job_stats_interval'] <= 0) {
		form_set_error('controlm_fetch_job_stats_interval', t('Interval value must be greater than zero.'));
	}
}
function controlm_fetch_job_stats_cron() {
	$enabled = variable_get('controlm_fetch_job_stats_cron',0);
	if($enabled = 1) {
		$interval = variable_get('controlm_fetch_job_stats_interval',3600);
		if (time() >= variable_get('controlm_fetch_job_stats_next_execution', 0)) {
			drupal_set_time_limit(0);
			$res = cmGetJobStats();
			watchdog('controlm_fetch_job_stats', 'controlm_fetch_job_stats_cron ran');
			variable_set('controlm_fetch_job_stats_next_execution', time() + $interval);
		}
	}
}


function cmGetJobStats() {
	ini_set('memory_limit','1G');
	ini_set('max_execution_time',0);

	$return = "";

	$newday = strtotime(variable_get('controlm_newday',''));
	$now = strtotime('now');
	$return .= "Newday: ".date('h:i',$newday)."<br />";
	$return .= "Current Time: ".date('h:i',$now)."<br />";

	if($now < $newday) {
		$odate = date('ymd',strtotime('yesterday'));
	} else {
		$odate = date('ymd');
	}
	$return .= "Effective date: ".$odate."<br />";

	$db_type = variable_get('controlm_em_db_type',array());
	switch($db_type) {
                case 'standard':
                        global $databases;
                        if(!isset($databases['ctmem'])) {
                                drupal_set_message('There must be a database defined for "ctmem"','error');
                                return;
                        }
			db_set_active('ctmem');
			$tables = db_select('information_schema.tables','t')
				->fields('t',array('table_name'))
				->condition(db_and()->condition('table_schema','public','=')->condition('table_name','%'.$odate.'%job','LIKE'))
				->execute();
			while($table = $tables->fetchAssoc()) {
				$return .= "Found table: ".$table['table_name']."<br />";
				$jobs = db_select($table['table_name'],'j')
					->fields('j',array('ORDER_ID','APPLICATION','GROUP_NAME','MEMNAME','JOB_NAME','ODATE','CPU_ID','STATUS','STATE','DELETE_FLAG','START_TIME','END_TIME'))
					->execute();
				while($job = $jobs->fetchAssoc()) {
					$result[] = $job;
				}
			}
			db_set_active();
                        break;
                case 'oci8':
                        $oci8 = variable_get('oci8',array());
                        if(!isset($oci8['databases']['ctmem'])) {
                                drupal_set_message('There must be an OCI8 database defined for "ctmem"','error');
                                return;
                        }
			oci8_db_set_active('ctmem');

			$sql = "BEGIN EMUSER.BIP_PERMISSIONS.GRANT_SELECT_TABLE; END;";
			oci8_db_query($sql)->execute();

			$sql = 'SELECT TABLE_NAME FROM ALL_TABLES WHERE TABLE_NAME LIKE \'%'.$odate.'%JOB\'';
			$tbl_query = oci8_db_query($sql);
			$tbl_query->execute();
			while($table = $tbl_query->fetchAssoc()) {
				$return .= "Found table: ".$table['TABLE_NAME']."<br />";
				$sql = "SELECT ORDER_ID,APPLICATION,GROUP_NAME,MEMNAME,JOB_NAME,ODATE,CPU_ID,STATUS,STATE,DELETE_FLAG,START_TIME,END_TIME FROM EMUSER.".$table['TABLE_NAME'];
				$job_query = oci8_db_query($sql);
				$job_query->execute();
				while($job = $job_query->fetchAssoc()) {
					$result[] = $job;
				}
			}
                        break;
                default:
                        drupal_set_message('Unknown DB driver '.$db_type.'.','error');
                        return;
        }

//	$return .= "<pre>".print_r($result,TRUE)."</pre>";

	$return .= "Truncating table cm_job_status...";
	db_truncate('cm_job_status')->execute();
	$return .= "Done<br />";

	foreach($result as $job) {
		//force array keys to be lowercase
		$job_lower = array_change_key_case($job, CASE_LOWER);
		$data = array();
		foreach($job_lower as $k => $v) {
			if($v != ' ') {
				$data['cmjs_'.$k] = $v;
			}
		}
		$return .= "Insert job ".implode(', ',$job_lower)."<br />";
		db_insert('cm_job_status')->fields($data)->execute();
		unset($data);
	}

	return($return);
}

