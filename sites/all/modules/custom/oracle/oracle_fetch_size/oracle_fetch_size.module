<?php

function oracle_fetch_size_menu () {
	$items = array();
	$items['admin/config/services/oracle/fetch_size'] = array(
		'title' => 'Fetch Sizes',
		'description' => 'Configuration for Oracle Fetch Sizes module',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('oracle_fetch_size_form'),
		'access arguments' => array('access administration pages'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 1,
	);
	$items['oracle/fetch_size'] = array(
		'title' => 'Fetch Sizes',
		'page callback' => 'oracle_fetch_size_execute',
		'access arguments' => array('access administration pages'),
		'type' => MENU_NORMAL_ITEM,
	);
	return $items;
}
function oracle_fetch_size_execute() {
  return array('#markup' => '<p>' . t(oraFetchSize()) . '</p>');
}
function oracle_fetch_size_form ($form, &$form_state) {
	$form['oracle_fetch_size_cron'] = array(
		'#type' => 'checkbox',
		'#title' => t('Run during Cron?'),
		'#default_value' => variable_get('oracle_fetch_size_cron',1),
		'#description' => t('Do we want to run periodically through cron?'),
		'#required' => FALSE,
	);
	$form['oracle_fetch_size_interval'] = array(
		'#type' => 'textfield',
		'#title' => t('Cron Interval'),
		'#default_value' => variable_get('oracle_fetch_size_interval',3600),
		'#size' => 10,
		'#maxlength' => 10,
		'#description' => t('The number of seconds between Cron executions.'),
		'#required' => TRUE,
	);
	return system_settings_form($form);
}
function oracle_fetch_size_form_validate ($form, &$form_state) {
	if(!ctype_digit(strval($form_state['values']['oracle_fetch_size_interval']))) {
		form_set_error('oracle_fetch_size_interval', t('Interval value must be an integer.'));
	}
	if($form_state['values']['oracle_fetch_size_interval'] <= 0) {
		form_set_error('oracle_fetch_size_interval', t('Interval value must be greater than zero.'));
	}
}
function oracle_fetch_size_cron() {
	$enabled = variable_get('oracle_fetch_size_cron',0);
	if($enabled = 1) {
		$interval = variable_get('oracle_fetch_size_interval',3600);
		if (time() >= variable_get('oracle_fetch_size_next_execution', 0)) {
			drupal_set_time_limit(0);
			$res = oraFetchSize();
			watchdog('oracle_fetch_size', 'oracle_fetch_size_cron ran');
			variable_set('oracle_fetch_size_next_execution', time() + $interval);
		}
	}
}


function oraFetchSize() {

	ini_set('memory_limit','1G');
	ini_set('max_execution_time',0);
	$return = "";

	db_set_active('bip');

	$oci8 = variable_get('oci8',array());
	
	foreach($oci8['databases'] as $dbname => $oci8_db) {
		oci8_db_set_active($dbname);
		$query = "select owner,segment_name,segment_type, sum(bytes/1024/1024) as total_size, trunc(sysdate) as record_date
			from dba_segments
			where owner not in ('SYS','SYSTEM','OUTLN','PERFSTAT','APTEAAUDIT')
			group by owner,segment_name,segment_type
			order by 4 desc";
		$result = oci8_db_query($query);
		while($rec = $result->fetchAssoc()) {
			$return .= "<pre>".print_r($rec,TRUE)."</pre>";
			$keys = array(
				'oss_db' => $dbname,
				'oss_owner' => $rec['OWNER'],
				'oss_segment' => $rec['SEGMENT_NAME'],
				'oss_segment_type' => $rec['SEGMENT_TYPE'],
				'oss_date' => date("Y-m-d",strtotime($rec['RECORD_DATE'])),
			);
			$fields = array(
				'oss_size' => $rec['TOTAL_SIZE'],
			);
			db_merge('ora_segment_size')->key($keys)->fields($fields)->execute();
		}
	}
	
	//$return .= "<pre>".print_r($oci8,TRUE)."</pre>";
	db_set_active();
	return($return);
}

