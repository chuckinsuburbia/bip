<?php

function xmatters_menu () {
	$items['xmatters'] = array(
		'title' => 'xMatters',
		'page callback' => '_xmatters_description',
		'access arguments' => array('access xmatters content'),
	);
	$items['xmatters/iadmin_get_status'] = array(
		'title' => 'View Agent Status',
		'page callback' => '_xmatters_iadmin_get_status',
		'access arguments' => array('access xmatters administration'),
	);
	$items['xmatters/fetch_integration_services'] = array(
		'title' => 'Fetch Integration Services',
		'page callback' => '_xmatters_fetch_integration_services',
		'access arguments' => array('access xmatters administration'),
	);
	$items['xmatters/on_duty_list'] = array(
		'title' => 'On-Duty List',
		'page callback' => '_xmatters_on_duty_list',
		'access arguments' => array('access xmatters content'),
	);
/*
	$items['xmatters/start_daemon'] = array(
		'title' => 'Start Daemon',
		'page callback' => '_xmatters_start_daemon',
		'access arguments' => array('access xmatters administration'),
	);
*/
/*
	$items['xmatters/stop_daemon'] = array(
		'title' => 'Stop Daemon',
		'page callback' => '_xmatters_stop_daemon',
		'access arguments' => array('access xmatters administration'),
	);
*/
	$items['admin/config/services/xmatters'] = array(
                'title' => 'xMatters',
                'description' => 'Configuration for xMatters Module',
                'page callback' => 'drupal_get_form',
                'page arguments' => array('xmatters_form'),
                'access arguments' => array('access xmatters administration'),
                'type' => MENU_NORMAL_ITEM,
        );
	$items['admin/config/services/xmatters/default'] = array(
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'title' => 'Settings',
		'weight' => 1,
	);
	return $items;
}

function xmatters_form ($form, &$form_state) {
	$form['xmatters_agent_path'] = array(
                '#type' => 'textfield',
                '#title' => t('Path to the base directory of the xMatters Integration Agent'),
                '#default_value' => variable_get('xmatters_agent_path', ''),
                '#size' => 255,
                '#maxlength' => 255,
                '#description' => t(''),
                '#required' => TRUE,
        );
	$form['xmatters_webservice_url'] = array(
                '#type' => 'textfield',
                '#title' => t('URL to the xMatters web service'),
                '#default_value' => variable_get('xmatters_webservice_url', ''),
                '#size' => 255,
                '#maxlength' => 255,
                '#description' => t(''),
                '#required' => TRUE,
        );
	$form['xmatters_webservice_user'] = array(
                '#type' => 'textfield',
                '#title' => t('Username for the xMatters web service'),
                '#default_value' => variable_get('xmatters_webservice_user', ''),
                '#size' => 255,
                '#maxlength' => 255,
                '#description' => t(''),
                '#required' => TRUE,
        );
	$form['xmatters_webservice_password'] = array(
                '#type' => 'textfield',
                '#title' => t('Password for the xMatters web service'),
                '#default_value' => variable_get('xmatters_webservice_password', ''),
                '#size' => 255,
                '#maxlength' => 255,
                '#description' => t(''),
                '#required' => TRUE,
        );
        return system_settings_form($form);
}

function xmatters_permission() {
	return array(
		'access xmatters content' => array( 'title' => t('Access content for the xMatters module'), ),
		'access xmatters administration' => array( 'title' => t('Administer the xMatters Module'), ),
		'access xmatters data feeds' => array( 'title' => t('Access data feeds for the xMatters module'), ),
	);
}

function xmatters_cron() {
	_xmatters_fetch_integration_services();
}

function _xmatters_description() {
	return array('#markup' => '<p>' . t('Place Holder') . '</p>');
}

function _xmatters_iadmin_get_status() {
	$agent_dir = variable_get('xmatters_agent_path', '');

	$cmd = "export HOME=".$agent_dir."; ".$agent_dir."/bin/iadmin.sh get-status 2>&1";
	exec($cmd,$stdout,$rc);
	$output = implode("<br />",$stdout);

	return array('#markup' => '<p>' . t($output) . '</p>');
}

function _xmatters_on_duty_list() {
	$output = "";
	$soapurl = variable_get('xmatters_webservice_url', '');
	$soapuser = variable_get('xmatters_webservice_user', '');
	$soappass = variable_get('xmatters_webservice_password', '');

	$client = new nusoap_client($soapurl, 'wsdl', false, false, false, false, 0, 600);
	$err = $client->getError();
	if ($err) {
		drupal_set_message('Constructor error<pre>'.$err.'</pre>','error');
		return array('#markup' => '');
	}

	if(isset($_REQUEST['group'])) {
		$groups['return']['matchingGroups']['group'][0]['name'] = $_REQUEST['group'];
	} else {
		$param = array(
			'user' => $soapuser,
			'password' => $soappass,
		);
		$groups = $client->call('FindGroups',$param);
		if ($client->fault) {
	                drupal_set_message("Client fault",'error');
			return array('#markup' => '');
	        } else {
	                $err = $client->getError();
	                if ($err) {
	                        drupal_set_message("Client error: ".$err,'error');
				return array('#markup' => '');
	                }
	        }
	
		if(!isset($groups['return']['matchingGroups']['group']) || !is_array($groups['return']['matchingGroups']['group']) || count($groups['return']['matchingGroups']['group']) == 0) {
			drupal_set_message("No Groups found in xMatters.",'error');
			return array('#markup' => '');
		}
	}

	foreach($groups['return']['matchingGroups']['group'] as $group) {
		$param = array(
			'user' => $soapuser,
			'password' => $soappass,
			'groupName' => $group['name'],
			'startDate' => date('d/m/Y g:i:s A'),
			'endDate' => date('d/m/Y g:i:s A',strtotime('tomorrow')),
			'includeRecipientDetails' => 'true',
		);
		$onDuty = $client->call('FindWhoIsOnDuty',$param);
		if ($client->fault) {
			continue;
	        } else {
	                $err = $client->getError();
	                if ($err) {
				continue;
	                }
	        }

		$output .= _xmatters_on_duty_display_group($onDuty);
//		$output .= "<pre>".print_r($onDuty,TRUE)."</pre>";	
	}
	return array('#markup' => '<p>' . t($output) . '</p>');
}

function _xmatters_on_duty_display_group($onDuty) {
	if($onDuty['return']['groupName'] == '') return '';
	$heading = $onDuty['return']['groupName'];
	$content = "";
	if(isset($onDuty['return']['scheduleList'])) {
		foreach($onDuty['return']['scheduleList'] as $schedule) {
			if(isset($schedule[0])) {
				foreach($schedule as $subsched) {
					$content .= _xmatters_on_duty_display_schedule($subsched,$onDuty);
				}
			} else {
				$content = _xmatters_on_duty_display_schedule($schedule,$onDuty);
			}
		}
	}
	$output = theme('ctools_collapsible',array(
		'handle' => $heading,
		'content' => $content,
		'collapsed' => 'true',
	));
	return $output;
}

function _xmatters_on_duty_display_schedule($schedule,$onDuty) {
	$heading = $schedule['name']."<br />";
	$content = "";
	if(is_array($schedule['recipientList']) && isset($schedule['recipientList']['recipient'])) {
		if(isset($schedule['recipientList']['recipient'][0])) {
			foreach($schedule['recipientList']['recipient'] as $recipient) {
				$content .= _xmatters_on_duty_display_recipient($recipient,$onDuty);
			}
		} else {
			$content = _xmatters_on_duty_display_recipient($schedule['recipientList']['recipient'],$onDuty);
		}
	}
	$output = theme('ctools_collapsible',array(
		'handle' => $heading,
		'content' => $content,
		'collapsed' => 'true',
	));
	return $output;
}

function _xmatters_on_duty_display_recipient($recipient,$onDuty) {
	$user = _xmatters_on_duty_find_user($recipient['targetName'],$onDuty);
	$content = "";
	if(!is_null($user)) {
		$heading = $user['firstName']." ".$user['lastName']."<br />";
		if(isset($user['devices']['device'][0])) {
			foreach($user['devices']['device'] as $device) {
				$device_details[] = _xmatters_on_duty_find_device($device['targetName'],$onDuty);
			}
		} else {
			 $device_details[] = _xmatters_on_duty_find_device($user['devices']['device']['targetName'],$onDuty);
		}
		foreach($device_details as $dd) {
			switch($dd['category']) {
				case "voiceDevice":
					$content .= $dd['name'].": (".$dd['areaCode'].") ".$dd['number']."<br />";
					break;
				case "emailDevice":
					$content .= $dd['name'].": ".$dd['address']."<br />";
					break;
				case "blackberryDevice":
					$content .= $dd['name'].": ".$dd['pinOrEmail']."<br />";
					break;
				case "textPhoneDevice":
					$content .= $dd['name'].": ".$dd['number']."<br />";
					break;					
			}
		}
//		$content .= "<pre>".print_r($device_details,TRUE)."</pre>";
		$output = theme('ctools_collapsible',array(
			'handle' => $heading,
			'content' => $content,
			'collapsed' => 'true',
		));
	} else {
		$output = $recipient['targetName']."<br />";
	}
	return $output;
}

function _xmatters_on_duty_find_user($name,$onDuty) {
	if(isset($onDuty['return']['detailedRecipientList']['users']['user']) && is_array($onDuty['return']['detailedRecipientList']['users']['user'])) {
		if(isset($onDuty['return']['detailedRecipientList']['users']['user'][0])) {
			foreach($onDuty['return']['detailedRecipientList']['users']['user'] as $user) {
				if($user['targetName'] == $name) {
					return($user);
				}
			}
		} else {
			if($onDuty['return']['detailedRecipientList']['users']['user']['targetName'] == $name) {
				return($onDuty['return']['detailedRecipientList']['users']['user']);
			}
		}
	}
	return(NULL);
}

function _xmatters_on_duty_find_device($device_name,$onDuty) {
	foreach($onDuty['return']['detailedRecipientList']['devices'] as $category => $category_devices) {
		if(isset($category_devices[0])) {
			foreach($category_devices as $device) {
				if($device['targetName'] == $device_name) {
					$device['category'] = $category;
					return($device);
				}
			}
		} else {
			if($category_devices['targetName'] == $device_name) {
				$category_devices['category'] = $category;
				return($category_devices);
			}
		}
	}
}

function _xmatters_fetch_integration_services() {
	$output = "";
	$agent_dir = variable_get('xmatters_agent_path', '');

	$cmd = "export HOME=".$agent_dir."; ".$agent_dir."/bin/iadmin.sh display-settings | grep Location: | awk 'BEGIN {FS = \":\"} {print $3}'";
	exec($cmd,$config_files,$rc);

	if(empty($config_files)) {
		drupal_set_message('No Integration Services Found.','error');
		return array('#markup' => '');
	}

	db_truncate('xmatters_integration_services')->execute();

	foreach($config_files as $file) {
		$content = file_get_contents($file);
		$xml = simplexml_load_string($content);
		$array = (array)$xml;
		db_insert('xmatters_integration_services')->fields(array('event_domain' => $array['domain'],'name' => $array['name']))->execute();
		$output .= "Domain: ".$array['domain']."; Name: ".$array['name']."<br />";
	}

	return array('#markup' => '<p>' . t($output) . '</p>');
}

function _xmatters_start_daemon() {
	$agent_dir = variable_get('xmatters_agent_path', '');

	$cmd = "export HOME=".$agent_dir."; ".$agent_dir."/bin/start_daemon.sh 2>&1";
	exec($cmd,$stdout,$rc);
	$output = implode("<br />",$stdout);

	return array('#markup' => '<p>' . t($output) . '</p>');
}

function _xmatters_stop_daemon() {
	$agent_dir = variable_get('xmatters_agent_path', '');

	$cmd = "export HOME=".$agent_dir."; ".$agent_dir."/bin/stop_daemon.sh 2>&1";
	exec($cmd,$stdout,$rc);
	$output = implode("<br />",$stdout);

	return array('#markup' => '<p>' . t($output) . '</p>');
}
